Title: IoT ‚Äì Aquaculture and Monitoring


GITHUB REPOSITORY LINK: https://github.com/RamyaK84/aquaculturemonitoring.git



____________________________________________________________________________________________________



Abstract:
The "IoT ‚Äì Aquaculture and Monitoring" project focuses on creating a prototype of a smart aquaculture monitoring system that enables real-time water quality monitoring using Internet of Things (IoT) technologies. This system is critical for fish farming and other aquaculture environments, where maintaining optimal water quality is vital for the health and productivity of aquatic organisms. Using Arduino and potentiometers to simulate key sensors, this prototype successfully models the behavior of a real-time monitoring system. The monitored parameters include pH level, turbidity, dissolved oxygen (DO), ammonia concentration, and water level. These data points are continuously evaluated, and alerts are generated based on predefined thresholds to signify when corrective actions are required. This phase documents the demonstration, feedback refinement, final testing, and preparation for project handover.



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


1. Project Demonstration
Overview:
The demonstration phase was designed to validate the functional performance of the simulated aquaculture monitoring system. It involved showcasing how the system detects water quality issues and provides real-time feedback. The core hardware includes an Arduino Uno microcontroller and multiple potentiometers simulating sensor values. This simulation represents an abstraction of a deployable IoT system that can be scaled with actual sensors and wireless transmission modules.
Demonstration Details:
‚Ä¢	Sensor Simulation:
o	pH Sensor (A0): Simulated with a potentiometer, converted to voltage. Thresholds: Acidic < 1.8V, Alkaline > 3.0V.
o	Turbidity Sensor (A1): Raw analog reading. Threshold: Unsafe > 500.
o	Dissolved Oxygen Sensor (A2): Mapped to 0‚Äì100% DO levels.
o	Ammonia Sensor (A5): Mapped to 0‚Äì100% concentration. Safe: < 5%, Dangerous: > 50%.
o	Water Level (A4): Simulated via potentiometer mapped to a 0‚Äì50 cm scale.
‚Ä¢	Output and Alerts:
o	Serial monitor outputs status updates per second.
o	Messages indicate if water is clean, pH levels, DO condition, water level status, and ammonia safety.
System Walkthrough:
‚Ä¢	Hardware Setup: Arduino Uno, five potentiometers representing sensors, and a PC with Arduino IDE for monitoring outputs.
‚Ä¢	Software Logic:
o	Sensor values are read through analog pins.
o	Data is processed with conversion formulas and mapped ranges.
o	Conditions are evaluated against environmental thresholds.
o	Alerts are displayed for each parameter in the serial monitor.

IoT Integration (Simulated):
           Although this phase uses analog simulations, the logic is designed to be scalable with actual digital/analog sensors and wireless modules (e.g., Wi-Fi or LoRa). The current setup lays the foundation for integration with cloud platforms like ThingSpeak or Blynk in future enhancements.

Performance Metrics:
‚Ä¢	Responsiveness: 1-second refresh rate provides timely updates.
‚Ä¢	Accuracy: Simulated sensor mapping closely follows realistic conditions.
‚Ä¢	Efficiency: Minimal power usage and fast loop execution. 

Security & Privacy:
‚Ä¢	Currently not connected to the network, hence no direct data security concerns.
‚Ä¢	Future IoT integration would include data encryption, authentication, and secure data transmission mechanisms.

Outcome: 
‚Ä¢	Successful demonstration of all simulated parameters.
‚Ä¢	Accurate generation of alerts based on condition thresholds.
‚Ä¢	System is ready for scaling with real-time sensors and network components.
________________________________________








2. Project Documentation
Overview:
Comprehensive documentation is prepared to support future development, deployment, and usage of the aquaculture monitoring system. It includes technical and user-oriented resources.
Documentation Sections:
System Architecture:
o	Block diagram of Arduino interfacing with simulated sensors.
o	Data flow from input (sensor simulation) to output (alert generation).
‚Ä¢	Code Documentation:
o	Descriptive comments for each function.
o	Clear variable naming conventions.
o	Thresholds explained in code.
‚Ä¢	User Guide:
o	Setup instructions for hardware connections.
o	How to adjust potentiometers to simulate changes.
o	Reading outputs via the Serial Monitor.
‚Ä¢	Administrator Guide:
o	Threshold tuning.
o	Adding or replacing simulated sensors.
o	Maintenance of Arduino sketch.
‚Ä¢	Testing Reports:
o	Logs of simulated values and corresponding output messages.
o	Scenario-based testing: acidic/alkaline conditions, high turbidity, DO fluctuations, ammonia levels, and low water level.
Outcome:
‚Ä¢	Ready-to-use technical and user documentation.Modular structure supports future upgrades & enables replication of prototype
3. Feedback and Final Adjustments
Overview:
Feedback was gathered from mentors, peers, and potential users to improve the system's logic, interface, and usability. Changes were implemented accordingly, followed by final testing.
Steps:
‚Ä¢	Feedback Collection:
o	Reviewed code clarity and output readability.
o	Evaluated logical accuracy against real-world scenarios.
o	Suggestions included labeling outputs clearly and improving sensor mapping.
‚Ä¢	Refinement:
o	Enhanced output formatting for better interpretation.
o	Optimized delay for improved responsiveness.
o	Added more descriptive output labels.
‚Ä¢	Final Testing:
o	Verified all edge cases: extreme sensor values, normal range, and critical levels.
o	Ensured serial monitor displays precise, understandable messages.
Outcome:
‚Ä¢	System refined for usability and performance.
‚Ä¢	Positive validation from test users.
‚Ä¢	Final version stable and demonstrable.
________________________________________





4. Final Project Report Submission
Overview:
The final report compiles all phases, findings, and development processes. It serves as an academic and technical reference for the completed project.
Report Sections:
‚Ä¢	Executive Summary:
o	Summarizes objectives, implementation, and achievements.
‚Ä¢	Phase Breakdown:
o	Covers each stage from planning to testing with details.
‚Ä¢	Challenges and Solutions:
o	Simulating real sensor behavior.
o	Mapping realistic sensor ranges.
o	Overcoming data instability in potentiometer simulation.
‚Ä¢	Outcomes:
o	Functional, modular prototype.
o	Well-documented and replicable system.
o	Scalable for future IoT deployment.
Outcomes:
‚Ä¢	Final report submitted with all required sections.
‚Ä¢	Completes academic evaluation criteria.
‚Ä¢	Ready for presentation and archiving.
________________________________________






5. Project Handover and Future Works
Overview:
The final stage involves formal handover of all project components and planning for future improvements and deployment.
Handover Details:
‚Ä¢	Hardware: Arduino setup with potentiometer-based sensors.
‚Ä¢	Software: Arduino sketch and documentation.
‚Ä¢	Documentation: User guides, admin guides, testing reports, and final project report.
Next Steps:
‚Ä¢	Replace simulated sensors with actual pH, turbidity, DO, ammonia, and ultrasonic level sensors.
‚Ä¢	Add wireless transmission (e.g., ESP8266, NodeMCU).
‚Ä¢	Integrate with cloud platforms for remote monitoring.
‚Ä¢	Implement mobile app or web dashboard for end-user access.
‚Ä¢	Include real-time alerts via SMS/email.
Outcome:
‚Ä¢	Project successfully handed over.
‚Ä¢	Clear path defined for future enhancements.
‚Ä¢	Prototype serves as foundation for a full-scale IoT-enabled aquaculture system.

   IOT-AQUA CULTURE AND MONITORING SYSTEM( Simulated sensors using Arduino)

1. Project Objective
The objective of this system is to monitor critical water quality parameters in an aquaculture environment using simulated sensors via Arduino. The setup uses potentiometers to simulate analog data for different water quality indicators and mimics real-world sensor behaviors. This document outlines the structure of data collection, conversion methods, interpretation rules, and a sample dataset schema for logging and analysis.

2. System Setup Overview
Sensor/Parameter	Simulated Input	Arduino Pin	Description
pH Sensor	Potentiometer	A0	Simulates pH levels via voltage readings
Turbidity Sensor	Potentiometer	A1	Simulates water clarity using analog values
Dissolved Oxygen	Potentiometer	A2	Simulates DO levels in % using mapped analog input
Ammonia Sensor (NH‚ÇÉ)	Potentiometer	A5	Simulates ammonia concentration as a percentage
Water Level Sensor	Potentiometer	A4	Simulates ultrasonic sensor measuring water depth

Each sensor outputs a value between 0 and 1023 (from analogRead()), which is converted into meaningful units using map() or formula-based scaling.

3. Sensor Data Conversion and Interpretation
üî∑ pH Sensor (Analog Pin A0)
Raw Input: sensorValue_pH = analogRead(A0)

Conversion Formula:

pH¬†Voltage
=
ùë†
ùëí
ùëõ
ùë†
ùëú
ùëü
ùëâ
ùëé
ùëô
ùë¢
ùëí
_
ùëù
ùêª
√ó
5.0
1023.0
pH¬†Voltage= 
1023.0
sensorValue_pH√ó5.0
‚Äã
 
Interpretation:

Voltage Range	Interpretation
< 1.8 V	Acidic (Not safe)
1.8 ‚Äì 3.0 V	Normal (Safe)
> 3.0 V	Alkaline (Not safe)

üî∑ Turbidity Sensor (Analog Pin A1)
Raw Input: sensorValue_turbidity = analogRead(A1)

Range: 0‚Äì1023 (Higher value = More turbid)

Threshold:

> 500 ‚Üí Not Clean (Turbid)

‚â§ 500 ‚Üí Clean

üî∑ Dissolved Oxygen (DO) Sensor (Analog Pin A2)
Raw Input: sensorValue_DO = analogRead(A2)

Conversion Formula:

DO¬†%
=
map(sensorValue_DO,¬†0,¬†1023,¬†0,¬†100)
DO¬†%=map(sensorValue_DO,¬†0,¬†1023,¬†0,¬†100)
Interpretation:

DO % Range	Status
< 5%	Low (Unsafe for fish)
5‚Äì15%	Normal (Safe)
> 15%	High (May be over-saturated)

üî∑ Ammonia (NH‚ÇÉ) Sensor (Analog Pin A5)
Raw Input: sensorValue_ammonia = analogRead(A5)

Conversion Formula:

NH‚ÇÉ¬†%
=
map(sensorValue_ammonia,¬†0,¬†1023,¬†0,¬†100)
NH‚ÇÉ¬†%=map(sensorValue_ammonia,¬†0,¬†1023,¬†0,¬†100)
Interpretation:

NH‚ÇÉ % Range	Status
< 5%	Safe (Low concentration)
5‚Äì50%	Caution (Monitor closely)
> 50%	Dangerous (Toxic for aquatic life)

üî∑ Water Level (Ultrasonic Sensor Simulated - Analog Pin A4)
Raw Input: sensorValue_level = analogRead(A4)

Conversion Formula:

Distance¬†(cm)
=
map(sensorValue_level,¬†0,¬†1023,¬†0,¬†50)
Distance¬†(cm)=map(sensorValue_level,¬†0,¬†1023,¬†0,¬†50)
Interpretation:

Distance	Level Status
< 10 cm	Too Low (Refill needed)
10‚Äì30 cm	Normal
‚â• 30 cm	Full

4. System Decision Logic
üìå Water Quality Check:
If turbidity > 500, or pH is out of range (1.8V‚Äì3.0V) ‚Üí Water is Not Clean

Else ‚Üí Water is Clean

üìå Water Level Check:
‚â• 30 cm ‚Üí Full

10‚Äì30 cm ‚Üí Normal

< 10 cm ‚Üí Too Low

üìå DO Level Check:
< 5% ‚Üí Low

5‚Äì15% ‚Üí Normal

> 15% ‚Üí High

üìå Ammonia Concentration Check:
< 5% ‚Üí Low

5‚Äì50% ‚Üí Normal

> 50% ‚Üí High

üìä Sample Dataset (sensor_dataset.csv)

This simulates sensor readings and results from the Arduino Serial Monitor:

Timestamp,pH_Voltage,Turbidity,DO_Percent,Ammonia_Percent,Water_Level_cm,Water_Status,DO_Status,Ammonia_Status
2025-05-21 10:00:00,2.45,400,12,25,25,Clean,Safe,Safe
2025-05-21 10:01:00,1.70,550,10,35,15,Not Clean,Safe,Safe
2025-05-21 10:02:00,3.10,300,18,60,30,Not Clean,High,High
2025-05-21 10:03:00,2.20,450,4,10,8,Clean,Low,Safe
2025-05-21 10:04:00,2.85,600,20,5,12,Not Clean,High,Safe


Each row is a snapshot of the simulated data and system interpretation.

       AquaCulture Monitoring System (Simulated)

This project simulates a water quality monitoring system using *Arduino Uno* and *potentiometers* to represent different sensors. It reads analog values, processes them, and displays status messages about water quality through the *Serial Monitor*.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

> üìÅ Project Files

- water_quality_simulation.ino ‚Äî Main Arduino sketch that reads and interprets sensor data.
- sensor_dataset.csv ‚Äî Sample dataset of sensor readings with interpretations.
- wiring_diagram.png ‚Äî Visual guide for connecting potentiometers to Arduino.
- README.md ‚Äî Project documentation.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

>Simulation Setup
            Simulated Sensors

| Parameter           | Simulated By   | Arduino Pin |
|---------------------|----------------|-------------|
| pH                  | Potentiometer  | A0          |
| Turbidity           | Potentiometer  | A1          |
| Dissolved Oxygen    | Potentiometer  | A2          |
| Ammonia Level       | Potentiometer  | A5          |
| Water Level         | Potentiometer  | A4          |

Each potentiometer simulates a sensor and outputs a voltage (0‚Äì5V) which Arduino reads using analogRead().

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

> About aquaculture_monitoring_simulation.ino

This Arduino code performs the following:

1. *Reads analog inputs* from 5 potentiometers simulating:
   - pH level
   - Turbidity
   - Dissolved Oxygen (DO)
   - Ammonia concentration
   - Water level

2. *Converts values*:
   - pH is calculated as voltage.
   - DO and Ammonia are mapped to percentage (0‚Äì100%).
   - Water level is mapped to a distance (cm).

3. *Checks thresholds*:
   - pH should be between *1.8V and 3.0V*.
   - Turbidity below *500* (clean).
   - DO should be *5‚Äì15%*.
   - Ammonia should be *< 50%*.
   - Water level should be *>10 cm*.

4. *Displays conditions*:
   - Clean/Not clean water
   - Water level status (Full / Normal / Too Low)
   - Safe/Unsafe DO and Ammonia levels


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

üìÑ README + Dataset Usage (in README.md)

 üìä Dataset

This repository includes a sample dataset: sensor_dataset.csv.

It contains simulated values for:
- pH voltage
- Turbidity
- Dissolved Oxygen (%)
- Ammonia (%)
- Water level (cm)

Each row also includes the interpreted water status based on thresholds used in the Arduino code.

You can use this for testing, plotting graphs, or developing a machine learning model.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
üñº Wiring Diagram Preview

üîå Wiring Summary

Simulated Sensor	Arduino Analog Pin	Potentiometer Middle Pin
pH Sensor	A0	Connect to A0
Turbidity Sensor	A1	Connect to A1
Dissolved Oxygen	A2	Connect to A2
Water Level Sensor	A4	Connect to A4
Ammonia Sensor	A5	Connect to A5

Other Potentiometer Pins:

One side to 5V

One side to GND
